public:
    //Function to return max value that can be put in knapsack of capacity W.
    int f(int ind, int W, int wt[], int val[], vector<vector<int>>& dp){
        if(ind == 0){
            if(wt[0] <= W) return val[0];
            else return 0;
        }
        if(dp[ind][W] != -1) return dp[ind][W];
        
        int notTake = 0 + f(ind-1, W, wt, val, dp);
        int take = INT_MIN;
        if(wt[ind] <= W) take = val[ind] + f(ind-1, W-wt[ind], wt, val, dp);
        
        return dp[ind][W] = max(take, notTake);
    }
    
    int knapSack(int W, int wt[], int val[], int n) 
    { 
        vector<vector<int>> dp(n, vector<int>(W+1, 0));
        // vector<vector<int>> dp(n, vector<int>(W+1, -1));
        // return f(n-1, W, wt, val, dp);
        
        for(int w = wt[0]; w<=W; w++) dp[0][w] =val[0];
        
        for(int ind=1; ind<n; ind++){
            for(int w=0; w<=W; w++){
                int notTake = 0 + dp[ind-1][w];
                int take = INT_MIN;
                if(wt[ind] <= w) take = val[ind] + dp[ind-1][w-wt[ind]];
                
                dp[ind][w] = max(take, notTake);
            }
        }
        return dp[n-1][W];
    }

class Solution
{
    public:
    static bool cmp(Item a, Item b){
        double r1 = (double)(a.value)/(double)(a.weight);
        double r2 = (double)(b.value)/(double)(b.weight);
        return r1 > r2;
    }
    //Function to get the maximum total value in the knapsack.
    double fractionalKnapsack(int W, Item arr[], int n)
    {
        vector<Item> v(n);
        for(int i=0; i<n; i++){
            v[i] = arr[i];
        }
        sort(v.begin(), v.end(), cmp);
        // for(auto it:v) cout<<it.value<<" "<<it.weight<<endl;
        double val = 0.0;
        int wt = 0;
        for(auto it:v){
            if(wt + it.weight <= W){
                wt += it.weight;
                val += it.value;
            } else {
                val += ((it.value)/(double)(it.weight))*(double)(W-wt);
                break;
            }
        }
        return val;
    }
   

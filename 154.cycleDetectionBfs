bool bfs(int src, vector<int> adj[], vector<int>& vis){
        // vis[node] = 1;
        queue<pair<int, int>> q;
        q.push({src, -1});
            vis[src] = 1;
        while(!q.empty()){
            int node = q.front().first;
            int par = q.front().second;
            q.pop();
            for(auto it:adj[node]){
                if(!vis[it]) {
                    q.push({it, node});
                    vis[it] = 1;
                }
                else if(it != par) return true;
            }
        }
        return false;
    }
  
    // Function to detect cycle in an undirected graph.
    bool isCycle(int V, vector<int> adj[]) {
       vector<int> vis(V, 0);
       for(int i=0; i<V; i++){
           if(vis[i] == 0){
               if(bfs(i, adj, vis)) return true;
           }
       }
       return false;
    }

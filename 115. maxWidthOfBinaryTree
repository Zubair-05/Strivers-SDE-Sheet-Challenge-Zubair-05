class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        if(!root) return 0;
        int ans = 0;
        queue<pair<TreeNode*, int>> q;
        q.push({root, 0});
        while(!q.empty()){
            int mini = q.front().second;
            int l, f;
            int n = q.size();
            for(int i=0; i<n; i++){
                int cur_id = q.front().second - mini;
                TreeNode* node = q.front().first;
                q.pop();
                if(i == 0) f = cur_id;
                if(i == n-1) l = cur_id;
                ans = max(ans, l-f+1);
                
                if(node->left) q.push({node->left, cur_id*(1LL)*2 + 1});
                if(node->right) q.push({node->right, cur_id*(1LL)*2 + 2});
                
            }
        }
        return ans;
    }
};

class Solution {
public:

    bool f(int ind, int sum, vector<int> nums, vector<vector<int>>& dp){
        if(sum == 0) return true;
        if(ind < 0) return false;
        if(dp[ind][sum] != -1) return dp[ind][sum];

        int notTaken = f(ind-1, sum, nums, dp);
        int taken = false;
        if(sum >= nums[ind]) taken = f(ind-1, sum-nums[ind], nums, dp);

        return dp[ind][sum] = (taken || notTaken);
    }

    bool canPartition(vector<int>& nums) {
        int n = nums.size(), sum = 0;
        for(auto it : nums) sum += it;
        if(sum%2 == 0) sum/= 2;
        else return false;

        vector<vector<int>> dp(n, vector<int>(sum+1, 0));
        for(int i=0; i<n; i++) dp[i][0] = 1;
        for(int ind = 1; ind <n; ind++){
            for(int tar = 1; tar <= sum; tar++){
                
                bool notTaken = dp[ind-1][tar];
                bool taken = false;
                if(tar >= nums[ind]) taken = dp[ind-1][tar-nums[ind]];
                dp[ind][tar] = (taken || notTaken);
            }
        }
        // vector<vector<int>> dp(n, vector<int>(sum+1, -1));
        // return f(n-1, sum, nums, dp);
        return dp[n-1][sum];
    }
};

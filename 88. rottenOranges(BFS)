class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>> vis(n, vector<int>(m, 0));
        queue<pair<pair<int, int>, int>> q;
        int cntFresh = 0, cnt = 0, time = 0;
        int dx[4] = {-1, 0, 1, 0};
        int dy[4] = {0, 1, 0, -1};
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(grid[i][j] == 2){
                    q.push({{i, j}, 0});
                    vis[i][j] = 2;
                } else if(grid[i][j] == 1){
                    cntFresh++;
                }
            }
        }

        while(!q.empty()){
            int x = q.front().first.first;
            int y = q.front().first.second;
            int t = q.front().second;
            time = max(t, time);
            q.pop();
            for(int i=0; i<4; i++){
                int newX = x + dx[i];
                int newY = y + dy[i];

                if(newX>=0 && newX<n && newY>=0 && newY<m && grid[newX][newY] == 1 && vis[newX][newY] == 0){
                    q.push({{newX, newY}, t+1});
                    // grid[newX][newY] = 2;
                    vis[newX][newY] = 2;
                    cnt++;
                }
            }
        }

        if(cnt != cntFresh) return -1;
        return time;
    }
};

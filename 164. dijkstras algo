//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
  public:
    vector<int> shortestPath(int n, int m, vector<vector<int>>& edges) {
        
        vector<pair<int, int>> adj[n+1];
        for(auto it:edges){
            adj[it[0]].push_back({it[1], it[2]});
            adj[it[1]].push_back({it[0], it[2]});
        }
        
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        vector<int> dist(n+1, 1e9);
        vector<int> par(n+1);
        for(int i=1; i<=n; i++) par[i] = i;
        dist[1] = 0;
        pq.push({0, 1});
        while(!pq.empty()){
            // cout<<"Hello"<<endl;
            int node = pq.top().second;
            int dis = pq.top().first;
            pq.pop();
         
            
            for(auto it:adj[node]){
                int adjNode = it.first;
                int edW = it.second;
                if(dis + edW < dist[adjNode]){
                    dist[adjNode] = dis + edW;
                    par[adjNode] = node;
                    pq.push({dis+edW, adjNode});
                }
            }
        }
        if(dist[n] == 1e9) return {-1};
        vector<int> ans;
        int node = n;
        while(par[node] != node){
            ans.push_back(node);
            node = par[node];
        }
        ans.push_back(1);
        reverse(ans.begin(), ans.end());
        return ans;
        
    }
};

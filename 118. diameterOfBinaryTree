//Optimal
class Solution {
public:
    int f(TreeNode* root, int& maxi){
        if(!root) return 0;
        
        int lh = f(root->left, maxi);
        int rh = f(root->right, maxi);
        
        maxi = max(maxi, lh+rh);
        return 1 + max(lh, rh);
        
    }
    int diameterOfBinaryTree(TreeNode* root) {
        int maxi = 0;
        int temp = f(root, maxi);
        return maxi;
    }
};


class Solution {
public:
    int depthOfBinary(TreeNode* root){
        if(!root) return 0;
        return 1 + max(depthOfBinary(root->left), depthOfBinary(root->right));
    }

    void f(TreeNode* root, int& maxi){
        if(!root) return;

        int lh = depthOfBinary(root->left);
        int rh = depthOfBinary(root->right);

        maxi = max(maxi, lh+rh);
        f(root->left, maxi);
        f(root->right, maxi);
    }

    int diameterOfBinaryTree(TreeNode* root) {
        int maxi = 0;
        f(root, maxi);
        return maxi;

    }
};

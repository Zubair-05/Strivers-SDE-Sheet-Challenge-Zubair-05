class Solution {
public:
    int f(int ind, int amount, vector<int>& coins, vector<vector<int>>& dp){
        if(ind == 0){
            if(amount % coins[0] == 0) return amount/coins[0];
            return 1e9;
        }
        if(dp[ind][amount] != -1) return dp[ind][amount];

        int notTake = f(ind-1, amount, coins, dp);
        int take = INT_MAX;
        if(coins[ind] <= amount) take = 1 + f(ind, amount-coins[ind], coins, dp);

        return dp[ind][amount] = min(take, notTake);
    }
    int coinChange(vector<int>& coins, int amount) {
       int n = coins.size();
    //    vector<vector<int>> dp(n, vector<int>(amount+1, -1));
    //    int ans = f(n-1, amount, coins, dp);
    //    if(ans >= 1e9) return -1;
    //    else return ans;
       vector<vector<int>> dp(n, vector<int>(amount+1, 0));
       for(int i=0; i<=amount; i++){
           if(i%coins[0] == 0) dp[0][i] = i/coins[0];
           else dp[0][i] = 1e9;
       }

       for(int ind = 1; ind < n; ind++){
           for(int amt = 0; amt <= amount; amt++){
               int notTake = dp[ind-1][amt];
               int take = 1e9;
               if(coins[ind] <= amt){
                   take = 1 + dp[ind][amt-coins[ind]];
               }

               dp[ind][amt] = min(take, notTake);
           }
       }
       return (dp[n-1][amount] >= 1e9)? -1 : dp[n-1][amount];
    }
};

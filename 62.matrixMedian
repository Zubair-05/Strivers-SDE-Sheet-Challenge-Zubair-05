#include<bits/stdc++.h>
int countSmallerThanEqualToMid(vector<int> &row, int mid) {
    int l = 0, h = row.size() - 1;
    while (l <= h) {
        int md = (l + h) >> 1;
        if (row[md] <= mid) {
            l = md + 1;
        }
        else {
            h = md - 1;
        }
    }
    return l;
}

int Solution::findMedian(vector<vector<int> > &A) {
    int n = A.size();
    int m = A[0].size();
    
    int low = 0, high = 1e9;
    while(low <= high){
        int mid = low + (high-low)/2;
        int cnt = 0;
        for(int i=0; i<n; i++){
            cnt += upper_bound(A[i].begin(), A[i].end(), mid)-A[i].begin();
            // cnt += countSmallerThanEqualToMid(A[i], mid);
        }
        if(cnt <= (m*n)/2){
            low = mid+1;
        } else high = mid-1;
    }
    return low;
}

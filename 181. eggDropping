//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution
{
    public:
    //Function to find minimum number of attempts needed in 
    //order to find the critical floor.
    int dp[205][205];
    int f(int ind, int k){
        if(ind == 1 || k == 0 || k == 1) return k;
        if(dp[ind][k] != -1) return dp[ind][k];
        int ans = 1e9;
        for(int i=1; i<=k; i++){
            int eggBreak = f(ind-1, i-1);
            int eggNotBreak = f(ind, k-i);
            
            ans = min(ans, 1 + max(eggBreak, eggNotBreak));
        }
        return dp[ind][k] = ans;
    }
    int eggDrop(int n, int k) 
    {
        // memset(dp, -1, sizeof(dp));
        // return f(n, k);
        vector<vector<int>> dp(n + 1, vector<int>(k + 1, 0));
    
        // Base cases: if only one egg is available, or if there are no floors or one floor.
        for (int i = 1; i <= n; i++) {
            dp[i][0] = 0;
            dp[i][1] = 1;
        }
    
        // If there is only one floor, the minimum number of attempts is equal to the number of eggs.
        for (int i = 1; i <= k; i++) {
            dp[1][i] = i;
        }
    
        for (int i = 2; i <= n; i++) {
            for (int j = 2; j <= k; j++) {
                dp[i][j] = 1e9;
                for (int x = 1; x <= j; x++) {
                    dp[i][j] = min(dp[i][j], 1 + max(dp[i - 1][x - 1], dp[i][j - x]));
                }
            }
        }
    
        return dp[n][k];
    }
};

//{ Driver Code Starts.
int main()
{
    //taking total testcases
    int t;
    cin>>t;
    while(t--)
    {
        //taking eggs and floors count
        int n, k;
        cin>>n>>k;
        Solution ob;
        //calling function eggDrop()
        cout<<ob.eggDrop(n, k)<<endl;
    }
    return 0;
}

// } Driver Code Ends

//TLE / own submission
class Solution {
public:

    void f(int ind, string s, vector<string>& ans){
        if(ind == s.size()){
            ans.push_back(s);
            cout<<s<<" ";
            return;
        }

        for(int i=ind; i<s.size(); i++){
            swap(s[i], s[ind]);
            f(ind+1, s, ans);
            swap(s[ind], s[i]);
        }
    }


    string getPermutation(int n, int k) {
        string s = "";
        for(int i=1; i<=n; i++){
            s += to_string(i);
        }
        cout<<" Initial string : "<<s<<endl;
        vector<string> ans;
        f(0, s, ans);
        sort(ans.begin(), ans.end());
        return ans[k-1];
    }
};

//Optimized Approach
class Solution {
public:
    string getPermutation(int n, int k) {
        int fact = 1;
        vector<int> nums;
        for(int i=1; i<n; i++){
            fact *= i;
            nums.push_back(i);
        }
        nums.push_back(n);
        k = k-1;
        string ans = "";
        while(true){
            ans += to_string(nums[k/fact]);
            nums.erase(nums.begin()+k/fact);
            if(nums.size() == 0) break;
            k = k%fact;
            fact /= nums.size();
        }
        return ans;
    }
};

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        map<ListNode*, int>mp;
        while(headA){
            mp[headA] = headA->val;
            headA = headA->next;
        }

        while(headB){
            if(mp.find(headB) != mp.end()) return headB;
            headB = headB->next;
        }
        return NULL;
    }
};


class Solution {
public:
    int findLen(ListNode* temp){
        int cnt = 0;
        while(temp){
            cnt++;
            temp = temp->next;
        }
        return cnt;
    }
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        int lenA = findLen(headA);
        int lenB = findLen(headB);

        if(lenA > lenB){
            while(lenA != lenB){
                headA = headA->next;
                lenA--;
            }
        }
        if(lenA < lenB){
            while(lenA != lenB){
                headB = headB->next;
                lenB--;
            }
        }
        while(headA && headB){
            if(headA == headB) return headA;
            headA = headA->next;
            headB = headB->next;
        }

        return NULL;

        
    }
};

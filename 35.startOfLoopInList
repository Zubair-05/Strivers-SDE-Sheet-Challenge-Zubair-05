/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        ListNode* slow = head;
        ListNode* fast = head;
        if(!head) return NULL;
        map<ListNode*, int> mp;
        while(fast->next && fast){
            if(mp.find(slow) != mp.end()) return slow;
            else{
                mp[slow] = slow->val;
                slow = slow->next;
            }
            fast = fast->next->next;
        }
        return NULL;
    }
};

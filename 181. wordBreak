class Solution {
public:
    int dp[301];
    bool f(int ind, string s, set<string> st){
        if(ind == s.size()) return 1;
        if(dp[ind] != -1) return dp[ind];
        string temp = "";
        for(int i=ind; i<s.size(); i++){
            temp += s[i];
            if(st.find(temp) != st.end()){
                if(f(i+1, s, st)) return dp[i] = true;
            }
        }
        return dp[ind] = false;
    }

    bool wordBreak(string s, vector<string>& wordDict) {
        set<string> st;
        for(auto it:wordDict){
            st.insert(it);
        }
        // memset(dp, -1, sizeof(dp));
        // return f(0, s, st);
         set<string> st;
        for (auto it : wordDict) {
            st.insert(it);
        }
        int n = s.size();
        vector<bool> dp(n + 1, false);
        dp[n] = true; // Base case: Empty string can be formed with no words.

        for (int i = n - 1; i >= 0; i--) {
            string temp = "";
            for (int j = i; j < n; j++) {
                temp += s[j];
                if (st.find(temp) != st.end() && dp[j + 1]) {
                    dp[i] = true;
                    break;
                }
            }
        }

        return dp[0];
    }
};

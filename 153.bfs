class Solution {
public:

    void bfs(int i, vector<int>& vis, vector<int> adj[]){
        queue<int> q;
        q.push(i);
        while(!q.empty()){
            int node = q.front();
            q.pop();
            vis[node] = 1;
            for(auto it:adj[node]){
                if(vis[it] == 0) q.push(it);
            }
        }
    }

    int findCircleNum(vector<vector<int>>& isConnected) {
        int n = isConnected.size();
        vector<int> adj[n+1];
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                if(isConnected[i][j] == 1){
                    adj[i+1].push_back(j+1);
                }
            }
        }
        vector<int> vis(n+1, 0);
        int cnt = 0;
        for(int i=1; i<=n; i++){
            if(!vis[i]){
                bfs(i, vis, adj);
                cnt++;
            }
        }
        return cnt;

    }
};

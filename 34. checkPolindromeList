/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverse(ListNode* head){
       ListNode* newHead = NULL;
        while(head){
            ListNode* n = head->next;
            head->next = newHead;
            newHead = head;
            head = n;
        }
        return newHead;
    }
    bool isPalindrome(ListNode* head) {
        ListNode *slow = head, *fast = head;
        if(!head->next) return true;
        while(fast && fast->next){
            slow = slow->next;
            fast = fast->next->next;
        }
        slow = reverse(slow);
        // slow = slow->next;
        fast = head;
        while(slow){
            if(slow->val != fast->val) return false;
            slow = slow->next;
            fast = fast->next;
        }
        return true;
    }
};

class Solution {
public:

    bool isSafe(int j, int i, int n, vector<string> board){
        int row = i, col = j;
        while(col >= 0){
            if(board[i][col] == 'Q') return false;
            col--;
        }
        row = i, col = j;

        while(row >= 0 && col >= 0){
            if(board[row][col] == 'Q') return false;
            col--, row--;
        }

        row = i, col = j;

        while(row<n && col>=0){
            if(board[row][col] == 'Q') return false;
            col--, row++;
        }

        return true;
    }

    void f(int col, int n, vector<string> board, vector<vector<string>>& ans){
        if(col == board.size()){
            ans.push_back(board);
            return;
        }
        
        for(int row=0; row<n; row++){
            if(isSafe(col, row, n,  board)){
                board[row][col] = 'Q';
                f(col+1, n, board, ans);
                board[row][col] = '.';
            }
        }
    }


    vector<vector<string>> solveNQueens(int n) {
        string s(n, '.');
        vector<vector<string>> ans;
        vector<string> board;
        for(int i=0; i<n; i++){
            board.push_back(s);
        }
        f(0, n, board, ans);
        return ans;
    }
};

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        
        ListNode* slow = head;
        ListNode* fast = head;
        while(n--){
            fast = fast->next;
        }

        if(!fast) return slow->next;

        while(fast->next != NULL){
            slow = slow->next;
            fast = fast->next;
        }
    
        slow->next = slow->next->next;

        return head;
    }
};



class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        
        int cnt = 0;
        ListNode* node = head;
        while(node){
            cnt++;
            node = node->next;
        }
        cnt = cnt-n;
        if(!cnt) return head->next;
        cout<<cnt;
        node = head;
        while(cnt-1){
            node = node->next;
            cnt--;
        }
        node->next = node->next->next;
        return head;
    }
};

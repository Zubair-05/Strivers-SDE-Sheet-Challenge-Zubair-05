#include<bits/stdc++.h>
using namespace std;

class heap{
    public:
        int arr[100];
        int size = 0;

        //inserting into array at end and converting into maxHeap.
        void insertion(int val){
            size += 1;
            int i = size;
            arr[i] = val;

            while(i>1){
                int par = i/2;
                if(arr[par] < arr[i]){
                    swap(arr[i], arr[i/2]);
                    i = par;
                } else return;
            }
            return;
        }

        void deletion(){

            if(size == 0) {
                cout<<" Nothing to delete "; 
                return;
            }
            //1. swap or put rootNode(arr[1]) with the last node(arr[size]);
            arr[1] = arr[size];
            //2. delete the last node
            size--;
            //3. propagate root node to its correct position.
            int i = 1;
            while(i<size){

                int left = 2*i;
                int right = 2*i + 1;

                if(left < size && arr[i] < arr[left]){
                    swap(arr[i], arr[left]);
                    i = left;
                } else if(right < size && arr[i] < arr[right]){
                    swap(arr[i], arr[right]);
                    i = right;
                } else return;
            }
        }

        void print(){
            for(int i=1; i<=size; i++) cout<<arr[i]<<" ";
            cout<<endl;
        }

        

};

    //leaf nodes exists from (n/2 + 1)th to nth index.
    //So we have to apply heapify algo from 1st index to n/2 th index.
void heapifyMax(int arr[], int n, int i){
    int largest = i;
    int left = 2*i;
    int right = 2*i + 1;

    if(left <= n && arr[largest] < arr[left]) largest = left;
    if(right <= n && arr[largest] < arr[right]) largest = right;

    if(largest != i){
        swap(arr[largest], arr[i]);
        heapifyMax(arr, n, largest);
    }
}

void heapifyMin(int arr[], int n, int i){
    int smallest = i;
    int left = 2*i;
    int right = 2*i + 1;

    if(left <= n && arr[smallest] > arr[left]) smallest = left;
    if(right <= n && arr[smallest] > arr[right]) smallest = right;

    if(smallest != i){
        swap(arr[smallest], arr[i]);
        heapifyMin(arr, n, smallest);
    }
}

void heapSort(int arr[], int n){
    int size = n;
    while(size > 1){
    //1.swap the leaf node with the root.
        swap(arr[size], arr[1]);
    //2. delete the leaf node. and reduce the size by one
        size--;
    //3. put the root node in correct position.
        heapifyMax(arr, size, 1);
    }
        
}

int main(){

    heap h;
    h.insertion(54);
    h.insertion(53);
    h.insertion(55);
    h.insertion(52);
    h.insertion(50);
    cout<<" After insertion : ";
    h.print();
    // h.deletion();
    // h.print();

    int arr[6] = {-1, 54, 53, 55, 52, 50};
    int n = 5;

    // max Heapify
    for(int i = n/2; i>0; i--){
        heapifyMax(arr, n, i);
    }
    cout<<"After Heapify(max) : ";
    for(int i=1; i<=n; i++) cout<<arr[i]<<" ";
    cout<<endl;

    // //min Heapify
    // for(int i = n/2; i>0; i--){
    //     heapifyMin(arr, n, i);
    // }
    // cout<<"After Heapify(min) : ";
    // for(int i=1; i<=n; i++) cout<<arr[i]<<" ";
    // cout<<endl;

    //calling heapSort Function.
    heapSort(arr, n);
    cout<<"After Heap Sorting : ";
    for(int i=1; i<=n; i++) cout<<arr[i]<<" ";
    cout<<endl;

    //max heap
    priority_queue<int> q;
    q.push(54);
    q.push(53);
    q.push(55);
    q.push(52);
    q.push(50);

    cout<<"Priority Queue(max) : ";
    while(!q.empty()){
        cout<<q.top()<<" ";
        q.pop();
    }


    cout<<endl;
    //minHeap
    priority_queue<int, vector<int>, greater<int>> p;
    p.push(54);
    p.push(53);
    p.push(55);
    p.push(52);
    p.push(50);

    cout<<"Priority Queue(min) : " ;
    while(!p.empty()){
        cout<<p.top()<<" ";
        p.pop();
    }


    return 0;
}
